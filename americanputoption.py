# -*- coding: utf-8 -*-
"""AmericanputOption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/112nf1zJkxQOCYfdOAUsF50gN5BYevmBD
"""

# American put Option value using Binomial Lattice -  Various Strike prices (x-axis) Vs. the option value (y-axis)
import numpy as np
from time import time
import matplotlib.pyplot as plt

@timing
# Pricing American put Option using Binomial Lattice
def AmericanPut_binomial_tree(K, T, S0, r, N, u, d, opttype):
    # precompute constanct , time step in each binomial tree is dt
    dt = T / N
    # q is risk meaturity - probability p
    q = (np.exp(r * dt) - d) / (u - d)
    disc = np.exp(-r * dt)
    # intialize asset price- for time step N
    S = np.zeros(N + 1)
    for j in range(0, N + 1):
        S[j] = S0 * u ** j * d ** (N - j)
    # intialize option value as maturity
    C = np.zeros(N + 1)
    for j in range(0, N + 1):
        if opttype == 'P':
            C[j] = max(0, K - S[j])
        else:
            C[j] = max(0, S[j] - K)
    # step backward through tree
    for i in np.arange(N - 1, -1, -1):
        for j in range(0, i + 1):
            # should update and calculate S each time to use in K-S
            S = S0 * u ** j * d ** (i - j)
            C[j] = disc * (q * C[j + 1] + (1 - q) * C[j])
            if opttype == 'P':
                C[j] = max(C[j], K - S)
            else:
                C[j] = max(C[j], S - K)
    return C[0]

S0 = 25
K = 25
T = 1
r = 0.21
N = 3
sigma = 0.4
u = 1.1
d = 0.9
opttype = "P"
#varius strike price in range 20-30
k = range(20, 30, 1)
strikeprice_american = []
for i in k:
    print(len(k))
    l1 = AmericanPut_binomial_tree(i, T, S0, r, N, u, d, opttype)
    strikeprice_american.append(l1)
print(strikeprice_american, len(strikeprice_american))
plt.plot(k, strikeprice_american)